// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Your MongoDB connection string in the .env file
}

// ---------------------------------------------------
// ENUMS & TYPES - For defining fixed sets of values
// ---------------------------------------------------

enum Role {
  LECTURER
  LAB_ASSISTANT
  COORDINATOR
  ADVISOR
  ADMIN
  SPEAKER
}

enum RoomType {
  LECTURE_HALL
  COMPUTER_LAB
  OFFICE
  MEETING_ROOM
  AUDITORIUM
}

enum AttendeeLevel {
  SECTION // Activity is for the entire section
  GROUP // Activity is for a sub-group of a section
}

enum ScheduleStatus {
  DRAFT // Initial setup phase
  PREFERENCES_OPEN // Personnel can log in and set preferences
  LOCKED // Preferences are closed, ready for allocation
  COMPLETED // Allocation is done and the schedule is published
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// Composite Type for embedding required personnel data directly into an ActivityTemplate
type RequiredPersonnel {
  role  Role
  count Int
}

// ---------------------------------------------------
// CORE RESOURCES - The fundamental building blocks
// ---------------------------------------------------

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String @unique
  preferenceToken String @unique @default(cuid())

  roles Role[]

  // A user can set many preferences
  preferences PersonnelPreference[]

  // A user can be assigned to many final scheduled events
  assignedEventIds String[]         @db.ObjectId
  assignedEvents   ScheduledEvent[] @relation("ScheduledEventPersonnel", fields: [assignedEventIds], references: [id])

  // A user can be part of the pool for many schedules
  scheduledInstanceIds String[]           @db.ObjectId
  scheduledInstances   ScheduleInstance[] @relation(fields: [scheduledInstanceIds], references: [id])
}

model Room {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique // e.g., "B510 Room 17"
  building String
  capacity Int
  type     RoomType

  // A room can host many final scheduled events
  scheduledEvents ScheduledEvent[]

  // A room can be part of the pool for many schedules
  scheduledInstanceIds String[]           @db.ObjectId
  scheduledInstances   ScheduleInstance[] @relation(fields: [scheduledInstanceIds], references: [id])
}

// ---------------------------------------------------
// ATTENDEE STRUCTURE - Hierarchical model for students
// ---------------------------------------------------

model Program {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String  @unique // "Computer Science - Regular"
  batches Batch[]
}

model Batch {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String // "2023 Intake"

  program   Program   @relation(fields: [programId], references: [id])
  programId String    @db.ObjectId
  sections  Section[]
}

model Section {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String // "Section A"

  batch   Batch   @relation(fields: [batchId], references: [id])
  batchId String  @db.ObjectId
  groups  Group[]

  // Sections that are part of a schedule instance
  scheduledInstanceIds String[]           @db.ObjectId
  scheduledInstances   ScheduleInstance[] @relation(fields: [scheduledInstanceIds], references: [id])

  // Final scheduled events for this section
  scheduledEvents ScheduledEvent[]
}

model Group {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String // "Group 1"

  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String  @db.ObjectId

  // Final scheduled events for this group
  scheduledEvents ScheduledEvent[]
}

// ---------------------------------------------------
// ACTIVITY DEFINITION - The templates for what needs to be scheduled
// ---------------------------------------------------

model Course {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  code  String @unique // "CS101"
  title String // "Introduction to Programming"

  // A course consists of one or more activity templates (e.g., lecture, lab)
  activityTemplates ActivityTemplate[]

  // A course can be offered in multiple schedule instances
  scheduledInstanceIds String[]           @db.ObjectId
  scheduledInstances   ScheduleInstance[] @relation(fields: [scheduledInstanceIds], references: [id])
}

model ActivityTemplate {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  title             String // "CS101 Lecture" or "CS101 Lab"
  durationMinutes   Int
  attendeeLevel     AttendeeLevel // Is this for a SECTION or a GROUP?
  requiredPersonnel RequiredPersonnel[] // Embedded list of required roles and counts
  requiredRoomType  RoomType

  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId

  // Preferences set by personnel for this activity
  preferences PersonnelPreference[]

  // The final scheduled events that are instances of this template
  scheduledEvents ScheduledEvent[]
}

// ---------------------------------------------------
// SCHEDULING CONTEXT & OUTPUT
// ---------------------------------------------------

model ScheduleInstance {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String         @unique // "Fall 2025 - CS Year 1"
  startDate DateTime
  endDate   DateTime
  status    ScheduleStatus @default(DRAFT)

  // Many-to-Many relations defining the scope of this schedule
  courseIds    String[]  @db.ObjectId
  courses      Course[]  @relation(fields: [courseIds], references: [id])
  sectionIds   String[]  @db.ObjectId
  sections     Section[] @relation(fields: [sectionIds], references: [id])
  personnelIds String[]  @db.ObjectId
  personnel    User[]    @relation(fields: [personnelIds], references: [id])
  roomIds      String[]  @db.ObjectId
  rooms        Room[]    @relation(fields: [roomIds], references: [id])

  // All preferences submitted for this schedule
  preferences PersonnelPreference[]

  // The final output: all scheduled events for this instance
  scheduledEvents ScheduledEvent[]
}

model PersonnelPreference {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  rank Int

  personnel          User             @relation(fields: [personnelId], references: [id])
  personnelId        String           @db.ObjectId
  activityTemplate   ActivityTemplate @relation(fields: [activityTemplateId], references: [id])
  activityTemplateId String           @db.ObjectId
  scheduleInstance   ScheduleInstance @relation(fields: [scheduleInstanceId], references: [id])
  scheduleInstanceId String           @db.ObjectId

  // A person can only rank a specific activity once per schedule
  @@unique([personnelId, activityTemplateId, scheduleInstanceId])
}

// The final output of the allocation algorithm
model ScheduledEvent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  dayOfWeek DayOfWeek
  startTime String // "08:30"
  endTime   String // "10:30"

  // The template this event is an instance of
  activityTemplate   ActivityTemplate @relation(fields: [activityTemplateId], references: [id])
  activityTemplateId String           @db.ObjectId

  // The resources assigned to this event
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String @db.ObjectId

  personnelIds String[] @db.ObjectId
  personnel    User[]   @relation("ScheduledEventPersonnel", fields: [personnelIds], references: [id])

  // The attendees for this event (one of these will be set, not both)
  attendeeSection   Section? @relation(fields: [attendeeSectionId], references: [id])
  attendeeSectionId String?  @db.ObjectId
  attendeeGroup     Group?   @relation(fields: [attendeeGroupId], references: [id])
  attendeeGroupId   String?  @db.ObjectId

  // The schedule instance this event belongs to
  scheduleInstance   ScheduleInstance @relation(fields: [scheduleInstanceId], references: [id])
  scheduleInstanceId String           @db.ObjectId
}


// File Hierarcy
/app
├── /admin
│   ├── /courses
│   │   ├── /_components
│   │   │   ├── course-form.tsx         // Form for creating/editing a course
│   │   │   ├── courses-table.tsx       // Data table to display all courses
│   │   │   ├── columns.tsx             // Columns for the Data table
│   │   │   └── client-page.tsx         // Client component to wrap table and actions
│   │   ├── /[courseId]
│   │   │   └── page.tsx                // Page to view/edit a single course
│   │   ├── /create
│   │   │   └── page.tsx                // Page with the form to create a new course
│   │   └── page.tsx                    // Main page to display the courses table
│   │
│   ├── /personnel
│   │   ├── /_components
│   │   │   ├── personnel-form.tsx
│   │   │   └── personnel-table.tsx
│   │   ├── page.tsx                    // Similar structure for Personnel (Users)
│   │   └── ...
│   │
│   ├── /rooms
│   │   ├── /_components
│   │   │   ├── room-form.tsx
│   │   │   └── rooms-table.tsx
│   │   ├── page.tsx                    // Similar structure for Rooms
│   │   └── ...
│   │
│   ├── /programs
│   │   ├── /_components
│   │   │   └── program-structure.tsx   // Component to display nested Programs > Batches > Sections > Groups
│   │   ├── page.tsx                    // Page to manage all academic structures
│   │   └── ...
│   │
│   ├── /schedules
│   │   ├── /_components
│   │   │   ├── schedule-form.tsx
│   │   │   ├── schedules-list.tsx
│   │   │   ├── resource-assignment.tsx // Component to assign courses/personnel/rooms to a schedule
│   │   │   └── schedule-calendar.tsx   // Component to display the final timetable
│   │   ├── /[scheduleId]
│   │   │   └── page.tsx                // The main dashboard for a single schedule instance
│   │   ├── /create
│   │   │   └── page.tsx
│   │   └── page.tsx                    // Page to list all schedule instances
│   │
│   ├── layout.tsx                      // Admin dashboard layout (e.g., with sidebar)
│   └── page.tsx                        // Admin dashboard homepage
│
├── /preferences
│   └── /[scheduleId]/[personnelId]
│       ├── /_components
│       │   └── preference-sorter.tsx   // Drag-and-drop interface for ranking activities
│       └── page.tsx                    // The public-facing page for personnel to set preferences
│
├── /timetable
│   └── /[userId]
│       └── page.tsx                    // Page for a logged-in user to view their personal timetable
│
├── /_components
│   ├── /shared                        // General-purpose, reusable components
│   │   ├── data-table.tsx
│   │   ├── page-header.tsx
│   │   ├── delete-alert-dialog.tsx
│   │   └── ...
│   └── /ui                            // Re-exporting ShadCN components (Button, Input, etc.)
│
├── layout.tsx                          // Root layout
└── page.tsx                            // Public homepage

/lib
├── actions.ts                          // Your existing server actions file
├── types.ts                            // Our new, central file for all type definitions
└── utils.ts                            // Utility functions (e.g., date formatting)

/prisma
├── client.ts                           // Your existing singleton Prisma client
└── schema.prisma                       // Your existing schema










// type definintions
// types/index.ts

import {
  Prisma,
  Course,
  ActivityTemplate,
  User,
  Room,
  ScheduleInstance,
  Program,
  Batch,
  Section,
  Group,
  PersonnelPreference,
  ScheduledEvent,
} from "@prisma/client";

// -----------------------------------------------------------------------------
// Type Definitions for Data Queries
//
// These types represent the shape of data returned by our server actions,
// which often include relations (e.g., a Course with its ActivityTemplates).
// We use Prisma.PromiseReturnType<T> to infer the return type of a function.
// -----------------------------------------------------------------------------

// --- Helper to infer Server Action return types ---
// This allows us to get the type of the `data` property from our server actions
type ServerActionData<T extends (...args: any) => any> =
  Prisma.PromiseReturnType<T> extends { data?: infer U } ? U : never;

// --- Full Data Structures from `getAll...` or `get...ById` actions ---

// A Course that includes its array of ActivityTemplates
export type CourseWithTemplates = Course & {
  activityTemplates: ActivityTemplate[];
};

// A Program with its full nested hierarchy of children
export type ProgramWithChildren = Program & {
  batches: (Batch & {
    sections: (Section & {
      groups: Group[];
    })[];
  })[];
};

// A comprehensive type for a single ScheduleInstance dashboard page.
// This includes all pooled resources, preferences, and the final schedule.
export type FullScheduleInstance = ScheduleInstance & {
  courses: CourseWithTemplates[];
  sections: (Section & { batch: Batch & { program: Program } })[];
  personnel: User[];
  rooms: Room[];
  preferences: PersonnelPreference[];
  scheduledEvents: ScheduledEvent[];
};

// -----------------------------------------------------------------------------
// Prop Types for Components
//
// Define the props for our React components based on the data types above.
// -----------------------------------------------------------------------------

export type CourseFormProps = {
  course?: CourseWithTemplates; // Optional for create, required for edit
  onSuccess: () => void;
};

export type CoursesTableProps = {
  courses: CourseWithTemplates[];
};

export type PersonnelFormProps = {
  user?: User;
  onSuccess: () => void;
};

export type PersonnelTableProps = {
  users: User[];
};

export type RoomFormProps = {
  room?: Room;
  onSuccess: () => void;
};

export type RoomsTableProps = {
  rooms: Room[];
};

export type ProgramStructureProps = {
  programs: ProgramWithChildren[];
};

export type SchedulesListProps = {
  schedules: ScheduleInstance[];
};

export type ResourceAssignmentProps = {
  schedule: FullScheduleInstance;
  allCourses: Course[];
  allSections: (Section & { batch: Batch & { program: Program } })[];
  allPersonnel: User[];
  allRooms: Room[];
};

export type PreferenceSorterProps = {
  scheduleInstanceId: string;
  personnelId: string;
  // Get all activities available in this schedule for the user's role
  availableActivities: (ActivityTemplate & { course: Course })[];
  // Get existing preferences to pre-populate the sorter
  existingPreferences: PersonnelPreference[];
};

export type ScheduleCalendarProps = {
  events: ScheduledEvent[];
  // We might also need the full context for displaying details on click
  scheduleContext: FullScheduleInstance;
};
