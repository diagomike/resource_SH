// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Your MongoDB connection string in the .env file
}

// ---------------------------------------------------
// ENUMS & TYPES - For defining fixed sets of values
// ---------------------------------------------------

enum Role {
  LECTURER
  LAB_ASSISTANT
  COORDINATOR
  ADVISOR
  ADMIN
  SPEAKER
}

enum RoomType {
  LECTURE_HALL
  COMPUTER_LAB
  OFFICE
  MEETING_ROOM
  AUDITORIUM
}

enum AttendeeLevel {
  SECTION // Activity is for the entire section
  GROUP // Activity is for a sub-group of a section
}

enum ScheduleStatus {
  DRAFT // Initial setup phase
  PREFERENCES_OPEN // Personnel can log in and set preferences
  LOCKED // Preferences are closed, ready for allocation
  COMPLETED // Allocation is done and the schedule is published
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// Composite Type for embedding required personnel data directly into an ActivityTemplate
type RequiredPersonnel {
  role  Role
  count Int
}

// ---------------------------------------------------
// CORE RESOURCES - The fundamental building blocks
// ---------------------------------------------------

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String @unique
  preferenceToken String @unique @default(cuid())

  roles Role[]

  // A user can set many preferences
  preferences PersonnelPreference[]

  // A user can be assigned to many final scheduled events
  assignedEventIds String[]         @db.ObjectId
  assignedEvents   ScheduledEvent[] @relation("ScheduledEventPersonnel", fields: [assignedEventIds], references: [id])

  // A user can be part of the pool for many schedules
  scheduledInstanceIds String[]           @db.ObjectId
  scheduledInstances   ScheduleInstance[] @relation(fields: [scheduledInstanceIds], references: [id])
}

model Room {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique // e.g., "B510 Room 17"
  building String
  capacity Int
  type     RoomType

  // A room can host many final scheduled events
  scheduledEvents ScheduledEvent[]

  // A room can be part of the pool for many schedules
  scheduledInstanceIds String[]           @db.ObjectId
  scheduledInstances   ScheduleInstance[] @relation(fields: [scheduledInstanceIds], references: [id])
}

// ---------------------------------------------------
// ATTENDEE STRUCTURE - Hierarchical model for students
// ---------------------------------------------------

model Program {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String  @unique // "Computer Science - Regular"
  batches Batch[]
}

model Batch {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String // "2023 Intake"

  program   Program   @relation(fields: [programId], references: [id])
  programId String    @db.ObjectId
  sections  Section[]
}

model Section {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String // "Section A"

  batch   Batch   @relation(fields: [batchId], references: [id])
  batchId String  @db.ObjectId
  groups  Group[]

  // Sections that are part of a schedule instance
  scheduledInstanceIds String[]           @db.ObjectId
  scheduledInstances   ScheduleInstance[] @relation(fields: [scheduledInstanceIds], references: [id])

  // Final scheduled events for this section
  scheduledEvents ScheduledEvent[]
}

model Group {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String // "Group 1"

  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String  @db.ObjectId

  // Final scheduled events for this group
  scheduledEvents ScheduledEvent[]
}

// ---------------------------------------------------
// ACTIVITY DEFINITION - The templates for what needs to be scheduled
// ---------------------------------------------------

model Course {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  code  String @unique // "CS101"
  title String // "Introduction to Programming"

  // A course consists of one or more activity templates (e.g., lecture, lab)
  activityTemplates ActivityTemplate[]

  // A course can be offered in multiple schedule instances
  scheduledInstanceIds String[]           @db.ObjectId
  scheduledInstances   ScheduleInstance[] @relation(fields: [scheduledInstanceIds], references: [id])
}

model ActivityTemplate {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  title             String // "CS101 Lecture" or "CS101 Lab"
  durationMinutes   Int
  attendeeLevel     AttendeeLevel // Is this for a SECTION or a GROUP?
  requiredPersonnel RequiredPersonnel[] // Embedded list of required roles and counts
  requiredRoomType  RoomType

  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId

  // Preferences set by personnel for this activity
  preferences PersonnelPreference[]

  // The final scheduled events that are instances of this template
  scheduledEvents ScheduledEvent[]
}

// ---------------------------------------------------
// SCHEDULING CONTEXT & OUTPUT
// ---------------------------------------------------

model ScheduleInstance {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String         @unique // "Fall 2025 - CS Year 1"
  startDate DateTime
  endDate   DateTime
  status    ScheduleStatus @default(DRAFT)

  // Many-to-Many relations defining the scope of this schedule
  courseIds    String[]  @db.ObjectId
  courses      Course[]  @relation(fields: [courseIds], references: [id])
  sectionIds   String[]  @db.ObjectId
  sections     Section[] @relation(fields: [sectionIds], references: [id])
  personnelIds String[]  @db.ObjectId
  personnel    User[]    @relation(fields: [personnelIds], references: [id])
  roomIds      String[]  @db.ObjectId
  rooms        Room[]    @relation(fields: [roomIds], references: [id])

  // All preferences submitted for this schedule
  preferences PersonnelPreference[]

  // The final output: all scheduled events for this instance
  scheduledEvents ScheduledEvent[]
}

model PersonnelPreference {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  rank Int

  personnel          User             @relation(fields: [personnelId], references: [id])
  personnelId        String           @db.ObjectId
  activityTemplate   ActivityTemplate @relation(fields: [activityTemplateId], references: [id])
  activityTemplateId String           @db.ObjectId
  scheduleInstance   ScheduleInstance @relation(fields: [scheduleInstanceId], references: [id])
  scheduleInstanceId String           @db.ObjectId

  // A person can only rank a specific activity once per schedule
  @@unique([personnelId, activityTemplateId, scheduleInstanceId])
}

// The final output of the allocation algorithm
model ScheduledEvent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  dayOfWeek DayOfWeek
  startTime String // "08:30"
  endTime   String // "10:30"

  // The template this event is an instance of
  activityTemplate   ActivityTemplate @relation(fields: [activityTemplateId], references: [id])
  activityTemplateId String           @db.ObjectId

  // The resources assigned to this event
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String @db.ObjectId

  personnelIds String[] @db.ObjectId
  personnel    User[]   @relation("ScheduledEventPersonnel", fields: [personnelIds], references: [id])

  // The attendees for this event (one of these will be set, not both)
  attendeeSection   Section? @relation(fields: [attendeeSectionId], references: [id])
  attendeeSectionId String?  @db.ObjectId
  attendeeGroup     Group?   @relation(fields: [attendeeGroupId], references: [id])
  attendeeGroupId   String?  @db.ObjectId

  // The schedule instance this event belongs to
  scheduleInstance   ScheduleInstance @relation(fields: [scheduleInstanceId], references: [id])
  scheduleInstanceId String           @db.ObjectId
}
